import { useEffect } from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import {
  Button,
  Input,
  VStack,
  Container,
  Center,
  Heading,
  useToast,
} from "@chakra-ui/react";
import { useForm, Controller, SubmitHandler } from "react-hook-form";
import noLeadOrTrailWhites from "utils/sanitizer";
import { User } from "types";
import { useMain, useUsers, useSocket } from "@/context/contexts";
import PasswordInput from "@/components/passwordInput";

type FormValues = {
  name: string;
  room: string;
  pass: string;
};

function Home(): JSX.Element {
  const socket = useSocket();
  const toast = useToast();
  const router = useRouter();
  const [_users, setUsers] = useUsers();
  const [_name, _room, _pass, setName, setRoom, setPass] = useMain();
  const {
    control,
    handleSubmit,
    reset,
    formState: { errors },
  } = useForm();

  const onSubmit: SubmitHandler<FormValues> = (data): void => {
    const sanitizedName = noLeadOrTrailWhites(data.name);
    const sanitizedRoom = noLeadOrTrailWhites(data.room);
    socket.emit(
      "login",
      { name: sanitizedName, room: sanitizedRoom },
      ({ error, user }): void => {
        if (error || !user) {
          toast({
            title: "Something went wrong",
            description: error,
            status: "error",
            duration: 9000,
            isClosable: true,
          });
        } else {
          setName(user.name);
          setRoom(user.room);
          setPass(data.pass);
          reset({ name: "", room: "", pass: "" });
          router.push("/chat");
        }
      }
    );
  };

  useEffect((): void => {
    const start = Date.now();
    if (socket) {
      socket.emit("ping", (id: string): void => {
        console.log(`pong (${Date.now() - start}ms) - ${id}`);
      });
      socket.on("users", (roomUsers: User[]): void => {
        setUsers(roomUsers);
      });
    }
  }, [socket]);

  return (
    <Center h="100vh">
      <Container>
        <Head>
          <title>Next-Chat</title>
          <meta
            name="description"
            content="Chat generated by create next app"
          />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <Heading as="h1">Home</Heading>
        <VStack
          as="form"
          spacing={4}
          align="stretch"
          onSubmit={handleSubmit(onSubmit)}
          my={4}
        >
          <Controller
            name="name"
            control={control}
            defaultValue=""
            rules={{
              required: "Name is required",
              validate: {
                hasContent: (str: string): true | string =>
                  noLeadOrTrailWhites(str).length > 0 || "Use a real name!",
              },
              maxLength: {
                value: 20,
                message: "Name has to be less than 20 characters",
              },
            }}
            render={({ field }): JSX.Element => (
              <>
                <Input
                  {...field}
                  placeholder="name"
                  errorBorderColor="crimson"
                  isInvalid={errors.name ? true : false}
                />
                {errors.name && errors.name.message}
              </>
            )}
          />
          <Controller
            name="room"
            control={control}
            defaultValue=""
            rules={{
              required: "Room is required",
              validate: {
                hasContent: (str: string): true | string =>
                  noLeadOrTrailWhites(str).length > 0 || "Use a real name!",
              },
              maxLength: {
                value: 20,
                message: "Room has to be less than 20 characters",
              },
            }}
            render={({ field }): JSX.Element => (
              <>
                <Input
                  {...field}
                  placeholder="room"
                  errorBorderColor="crimson"
                  isInvalid={errors.room ? true : false}
                />
                {errors.room && errors.room.message}
              </>
            )}
          />
          <Controller
            name="pass"
            control={control}
            defaultValue=""
            rules={{
              required: "Password is required",
              maxLength: {
                value: 50,
                message: "Password has to be less than 20 characters",
              },
              minLength: {
                value: 6,
                message: "Password has to be more than 6 characters",
              },
            }}
            render={({ field }): JSX.Element => (
              <>
                <PasswordInput
                  field={field}
                  isInvalid={errors.pass ? true : false}
                  placeholder="room password"
                />
                {errors.pass && errors.pass.message}
              </>
            )}
          />
          <Button type="submit" colorScheme="teal">
            Join
          </Button>
        </VStack>
      </Container>
    </Center>
  );
}
export default Home;
